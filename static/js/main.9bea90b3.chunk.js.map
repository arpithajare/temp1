{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","Component","render","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","this","props","extraClassName","React","createElement","id","concat","className","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","node","grid","unvisitedNeighbors","neighbors","push","length","filter","neighbor","isVisited","getUnvisitedNeighbors","previousNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","super","state","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","visualizeDijkstra","startNode","finishNode","nodes","getAllNodes","closestNode","shift","Infinity","dijkstra","currentNode","unshift","getNodesInShortestPathOrder","Fragment","onClick","map","rowIdx","key","nodeIdx","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAIe,MAAMA,UAAaC,YAChCC,SACE,MAAMC,IACJA,EAAGC,SACHA,EAAQC,QACRA,EAAOC,OACPA,EAAMC,YACNA,EAAWC,aACXA,EAAYC,UACZA,EAASC,IACTA,GACEC,KAAKC,MACHC,EAAiBT,EACnB,cACAC,EACA,aACAC,EACA,YACA,GAEJ,OACEQ,IAAAC,cAAA,OACEC,GAAE,QAAAC,OAAUP,EAAG,KAAAO,OAAId,GACnBe,UAAS,QAAAD,OAAUJ,GACnBN,YAAaA,IAAMA,EAAYG,EAAKP,GACpCK,aAAcA,IAAMA,EAAaE,EAAKP,GACtCM,UAAWA,IAAMA,OCPzB,SAASU,EAAoBC,GAC3BA,EAAeC,KAAK,CAACC,EAAOC,IAAUD,EAAME,SAAWD,EAAMC,UAG/D,SAASC,EAAyBC,EAAMC,GACtC,MAAMC,EAOR,SAA+BF,EAAMC,GACnC,MAAME,EAAY,IACZ1B,IAACA,EAAGO,IAAEA,GAAOgB,EACfhB,EAAM,GAAGmB,EAAUC,KAAKH,EAAKjB,EAAM,GAAGP,IACtCO,EAAMiB,EAAKI,OAAS,GAAGF,EAAUC,KAAKH,EAAKjB,EAAM,GAAGP,IACpDA,EAAM,GAAG0B,EAAUC,KAAKH,EAAKjB,GAAKP,EAAM,IACxCA,EAAMwB,EAAK,GAAGI,OAAS,GAAGF,EAAUC,KAAKH,EAAKjB,GAAKP,EAAM,IAC7D,OAAO0B,EAAUG,OAAOC,IAAaA,EAASC,WAdnBC,CAAsBT,EAAMC,GACvD,IAAK,MAAMM,KAAYL,EACrBK,EAAST,SAAWE,EAAKF,SAAW,EACpCS,EAASG,aAAeV,QCzB5B,MAAMW,EAAiB,GACjBC,EAAiB,GACjBC,EAAkB,GAClBC,EAAkB,GAET,MAAMC,UAA8BxC,YACjDyC,cACEC,QACAhC,KAAKiC,MAAQ,CACXjB,KAAM,GACNkB,gBAAgB,GAIpBC,oBACE,MAAMnB,EAAOoB,IACbpC,KAAKqC,SAAS,CAACrB,SAGjBsB,gBAAgBvC,EAAKP,GACnB,MAAM+C,EAAUC,EAA0BxC,KAAKiC,MAAMjB,KAAMjB,EAAKP,GAChEQ,KAAKqC,SAAS,CAACrB,KAAMuB,EAASL,gBAAgB,IAGhDO,iBAAiB1C,EAAKP,GACpB,IAAKQ,KAAKiC,MAAMC,eAAgB,OAChC,MAAMK,EAAUC,EAA0BxC,KAAKiC,MAAMjB,KAAMjB,EAAKP,GAChEQ,KAAKqC,SAAS,CAACrB,KAAMuB,IAGvBG,gBACE1C,KAAKqC,SAAS,CAACH,gBAAgB,IAGjCS,gBAAgBC,EAAqBC,GACnC,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAoBxB,OAAQ0B,IAAK,CACpD,GAAIA,IAAMF,EAAoBxB,OAI5B,YAHA2B,WAAW,KACT/C,KAAKgD,oBAAoBH,IACxB,GAAKC,GAGVC,WAAW,KACT,MAAMhC,EAAO6B,EAAoBE,GACjCG,SAASC,eAAc,QAAA5C,OAASS,EAAKhB,IAAG,KAAAO,OAAIS,EAAKvB,MAAOe,UACtD,qBACD,GAAKuC,IAIZE,oBAAoBH,GAClB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAyBzB,OAAQ0B,IACnDC,WAAW,KACT,MAAMhC,EAAO8B,EAAyBC,GACtCG,SAASC,eAAc,QAAA5C,OAASS,EAAKhB,IAAG,KAAAO,OAAIS,EAAKvB,MAAOe,UACtD,2BACD,GAAKuC,GAIZK,oBACE,MAAMnC,KAACA,GAAQhB,KAAKiC,MACdmB,EAAYpC,EAAKU,GAAgBC,GACjC0B,EAAarC,EAAKY,GAAiBC,GACnCe,EDlEH,SAAkB5B,EAAMoC,EAAWC,GACxC,MAAMT,EAAsB,GAC5BQ,EAAUvC,SAAW,EACrB,MAAMJ,EAsCR,SAAqBO,GACnB,MAAMsC,EAAQ,GACd,IAAK,MAAMvD,KAAOiB,EAChB,IAAK,MAAMD,KAAQhB,EACjBuD,EAAMnC,KAAKJ,GAGf,OAAOuC,EA7CgBC,CAAYvC,GACnC,KAASP,EAAeW,QAAQ,CAC9BZ,EAAoBC,GACpB,MAAM+C,EAAc/C,EAAegD,QAEnC,IAAID,EAAY7D,OAAhB,CAGA,GAAI6D,EAAY3C,WAAa6C,IAAU,OAAOd,EAG9C,GAFAY,EAAYjC,WAAY,EACxBqB,EAAoBzB,KAAKqC,GACrBA,IAAgBH,EAAY,OAAOT,EACvC9B,EAAyB0C,EAAaxC,KCmDV2C,CAAS3C,EAAMoC,EAAWC,GAChDR,EDdH,SAAqCQ,GAC1C,MAAMR,EAA2B,GACjC,IAAIe,EAAcP,EAClB,KAAuB,OAAhBO,GACLf,EAAyBgB,QAAQD,GACjCA,EAAcA,EAAYnC,aAE5B,OAAOoB,ECO4BiB,CAA4BT,GAC7DrD,KAAK2C,gBAAgBC,EAAqBC,GAG5CtD,SACE,MAAMyB,KAACA,EAAIkB,eAAEA,GAAkBlC,KAAKiC,MAEpC,OACE9B,IAAAC,cAAAD,IAAA4D,SAAA,KACE5D,IAAAC,cAAA,UAAQ4D,QAASA,IAAMhE,KAAKmD,qBAAqB,kCAGjDhD,IAAAC,cAAA,OAAKG,UAAU,QACZS,EAAKiD,IAAI,CAAClE,EAAKmE,IAEZ/D,IAAAC,cAAA,OAAK+D,IAAKD,GACPnE,EAAIkE,IAAI,CAAClD,EAAMqD,KACd,MAAMrE,IAACA,EAAGP,IAAEA,EAAGC,SAAEA,EAAQC,QAAEA,EAAOC,OAAEA,GAAUoB,EAC9C,OACEZ,IAAAC,cAACf,EAAI,CACH8E,IAAKC,EACL5E,IAAKA,EACLC,SAAUA,EACVC,QAASA,EACTC,OAAQA,EACRuC,eAAgBA,EAChBtC,YAAaA,CAACG,EAAKP,IAAQQ,KAAKsC,gBAAgBvC,EAAKP,GACrDK,aAAcA,CAACE,EAAKP,IAClBQ,KAAKyC,iBAAiB1C,EAAKP,GAE7BM,UAAWA,IAAME,KAAK0C,gBACtB3C,IAAKA,WAY3B,MAAMqC,EAAiBA,KACrB,MAAMpB,EAAO,GACb,IAAK,IAAIjB,EAAM,EAAGA,EAAM,GAAIA,IAAO,CACjC,MAAMsE,EAAa,GACnB,IAAK,IAAI7E,EAAM,EAAGA,EAAM,GAAIA,IAC1B6E,EAAWlD,KAAKmD,EAAW9E,EAAKO,IAElCiB,EAAKG,KAAKkD,GAEZ,OAAOrD,GAGHsD,EAAaA,CAAC9E,EAAKO,KAChB,CACLP,MACAO,MACAL,QAASK,IAAQ2B,GAAkBlC,IAAQmC,EAC3ClC,SAAUM,IAAQ6B,GAAmBpC,IAAQqC,EAC7ChB,SAAU6C,IACVnC,WAAW,EACX5B,QAAQ,EACR8B,aAAc,OAIZe,EAA4BA,CAACxB,EAAMjB,EAAKP,KAC5C,MAAM+C,EAAUvB,EAAKuD,QACfxD,EAAOwB,EAAQxC,GAAKP,GACpBgF,EAAU,IACXzD,EACHpB,QAASoB,EAAKpB,QAGhB,OADA4C,EAAQxC,GAAKP,GAAOgF,EACbjC,GCvIMkC,MARf,WACE,OACEtE,IAAAC,cAAA,OAAKG,UAAU,OACbJ,IAAAC,cAAC0B,EAAqB,QCKR4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASxF,OAAOY,IAAAC,cAACqE,EAAG,MAAKxB,SAASC,eAAe,SD2H3C,kBAAmB8B,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC","file":"static/js/main.9bea90b3.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <>\n        <button onClick={() => this.visualizeDijkstra()}>\n          Visualize Dijkstra's Algorithm\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}